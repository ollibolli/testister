#!/usr/bin/env node

/**
 * this is a Cli for Purpus of this class is to forst
 */

var program = require('commander'),
    spawn = require('child_process').spawn,
    print = require('util').print,
    chokidar = require('chokidar'),
    FileSystemService = require('../lib/FileSystemService'),
    testDir = 'src/test/',
    mainDir = 'src/main/',
    cwd = process.cwd();

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] page')
  .option('-R, --reporter <name>', 'Specify the reporter to use (default spec)', 'spec')
  .option('-s, --scaffold ','Creates a html test files for every test module')
  .option('-t, --testDir <testdir>','Specify the path to the test directory (default src/test)','src/test')
  .option('-m, --mainDir <maindir>','Specify the path to the main directory (default src/main)','src/main')
  .option('-e, --extension <extension>', 'Specify the test file extention (default spec.js)','spec.js')
  .option('-p, --port <port>', 'The port to start local http server (default 3000)',3000)
  .option('-S, --server ', 'Start a http server',false)
  .option('-l, --logdir <logg-dir>', 'Specify the log output files (default targer)','target')
  .option('-x, --template <template>','Specify the path to a template file (default node_modules/testister/template.html','node_modules/testister/template.html')
  .option('-c, --configfile <configfile>','Url to a configfile in json format','testister.conf.json');
  
  program.on('--help', function(){
  console.log('This package is a comandline and browser based test-framework for testing amd modules using the RequireJs library.');
  console.log('');
  console.log('The the testframework is based on RequireJs as Amd loader, Mocha as test library, Chai as assertion library and Sinon as mock library ');
  console.log('Testister is');
  console.log('');
});

program.parse(process.argv);

var opt = {
  extension : program.extension,
  mainDir : program.mainDir ,
  testDir : program.testDir ,
  reporter : program.reporter ,
  httpPort: program.port ,
  serverOnly : program.server,
  logDir : program.logdir ,
  scaffold : program.scaffold,
  template : program.template,
  script: fs.realpathSync(__dirname + '/../lib/testister.js'),
}

//remove trailing slashes if they exists
opt.mainDir = opt.mainDir.replace(/\/$/, "");
opt.testDir = opt.testDir.replace(/\/$/, "");

var fileService = new FileSystemService(opt);
var config = fileService.getConfig(program.configfile);
//merge config to opt overiding defaults
for (var method in config){
	opt[method] = config[method];
}

if (opt.scaffold){
	fileService.scaffoldHtml(opt,true);
	if (! opt.serverOnly){
		process.exit(0);
	}
}

var app = startHttpServer(opt.httpPort);

if (! opt.serverOnly){
	var testSuiteFiles = fileService.scaffoldHtml();
	var testSuiteUrls = fileService.filePathToUrl(testSuiteFiles, 'http://localhost:'+ opt.httpPort);
	var testRunner = new TestRunner(testSuiteUrls,opt);
	testRunner.run();
}

function startHttpServer(port){	
	var express = require('express');
	var app = express();
	app
	.use('/test',express.static(path.normalize(process.cwd() + '/'+ opt.testDir)))
	.use(express.static(path.normalize(process.cwd() + '/'+ opt.mainDir)))
	.use(express.static(path.normalize(__dirname + "/../testlib")))
	.use(express.directory(path.normalize(process.cwd() + '/' + opt.mainDir)))
	.use('/test',express.directory(path.normalize(process.cwd() + '/' + opt.testDir)))
	.use(express.directory(path.normalize(__dirname + "/../testlib")))

	console.log('Starting local Http server on Port :'+ port);
	app.listen(port);
	return app;
}



/**
 * Creates a testrunner that run a single html file at a time.
 */
function TestRunner(testSuiteUrls, opt){

	var fs = require('fs')
		,self = this
		,result = true
		,logFile
		,errorFile;
	
	this.run = function (){
		var output= ""
			,buffer = "";// new Buffer(output);
		runTestSuit(opt.script, testSuiteUrls, opt.reporter);
				
		// the test is finish create result
		function runTestSuit(script, pages, reporter ){
			var config = JSON.stringify({
				timeout: program.timeout,
				cookies: [],
				headers: {},
				settings: {},
				logDir: opt.logDir,
				urls: pages
				// viewportSize: program.view,
				// useColors: program.color
			});
			var spawnArgs = [script, reporter, config];

			var phantomjs;
			for (var i=0; i < module.paths.length; i++) {
				var bin = path.join(module.paths[i], '.bin/phantomjs');
				if (process.platform === 'win32') {
					bin += '.cmd';
				}
				if (exists(bin)) {
					phantomjs = spawn(bin, spawnArgs);
					break;
				}
			}
			if (phantomjs === undefined) { 
				phantomjs = spawn('phantomjs', spawnArgs); 
			}

			phantomjs.stdout.on('data', function(data){
				print(data);
			});
			
			phantomjs.stderr.on('data', function(data){
				print("ERROR" + data);
			});
			
			phantomjs.on('error', function(error){
				print('ERROR : Testrunner onError ', error)
			});
			
			phantomjs.on('exit', function(code){		
				if (code != 0){
					result = false;
				}

				if (result){
					process.exit(0);
				}else {
					process.exit(1);
				}
			});			
		}
	}
}

